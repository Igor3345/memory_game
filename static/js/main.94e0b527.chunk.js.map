{"version":3,"sources":["PlayerScore.js","Cards.js","App.js","index.js"],"names":["PlayerScore","className","this","props","players_array","map","item","index","active_player","keys","React","Component","Cards","read","bind","e","target","img","img_arr","onClick","src","alt","img_key","App","state","players_key","player_current","cards","open_cards","image","turned_cards","function_state","main_class","createData","readCard","score","players_arr","players_keys","active","length","arr","imageKey","i","_cards_select","value","push","Math","floor","random","q","_players_select","setState","parseFloat","textContent","_container","classList","add","_header","remove","_main","style","display","element","turn","boolean","undefined","firstChild","setTimeout","current","getAttribute","ref","a","htmlFor","name","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94e0b527.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass PlayerScore extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <ul className=\"header__marks\">\r\n                {this.props.players_array.map((item, index) => <li className={'header__mark' + ' ' + this.props.active_player[index]} key={this.props.keys[index]}>\r\n                    Игрок {index + 1}:<span className='header__number' > {item}</span></li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayerScore;","import React from 'react';\r\n\r\nclass Cards extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.read = this.read.bind(this);\r\n    }\r\n    read(e) {\r\n        this.props.read(e.target);\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.img.img_arr.map((item, index) => <div className='main__card' key={this.props.img.img_key[index]} onClick={this.read}>\r\n                    <img className='main__img' src={item} alt='' /></div>)}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport PlayerScore from './PlayerScore';\r\nimport Cards from './Cards';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            players_array: [],  // Массив со счетом игроков, передается компоненту PlayerScore\r\n            players_key: [],  // Ключи для итемов из списка игроков\r\n            active_player: [],  // Массив, служащий для отображения активного игрока. Передается компоненту PlayerScore\r\n            player_current: 0,  // Массив, переключающий игроков в случае неправильной комбтинации. Работает вместе с со стейтом active_player. Передается компоненту PlayerScore\r\n            cards: 0,  // Число заявленных карточек на игровом столе\r\n            open_cards: 0,  // Число правильных комбинаций\r\n            image: {  // Объект, содержащий относительные адреса и ключи для создаваемых карточек\r\n                img_arr: [],\r\n                img_key: [],\r\n            },\r\n            turned_cards: [], // Массив в который передаются выбранные карточки для последующего сравнения\r\n            function_state: true,  // Булево значение для запуска функций readCard и score\r\n            main_class: 'main__table',  // Название активного класса для блока игрового стола\r\n        }\r\n        this.createData = this.createData.bind(this);\r\n        this.readCard = this.readCard.bind(this);\r\n        this.score = this.score.bind(this);\r\n    }\r\n    // Функция срабатывающая с началом/завершением игры. Заполняет стэйты изначальными данными.\r\n    createData(e) {\r\n        let players_arr = [];\r\n        let players_keys = [];\r\n        let active = [];\r\n        if (this.state.image.img_arr.length === 0) {\r\n            let arr = this.state.image.img_arr;\r\n            let imageKey = this.state.image.img_key;\r\n            for (let i = 0; i < this._cards_select.value / 2; i++) {\r\n                arr.push(`/img/card${i}.jpg`);\r\n                arr.push(`/img/card${i}.jpg`);\r\n            }\r\n            for (let i = 0; i < this._cards_select.value; i++) {\r\n                imageKey.push(Math.floor(Math.random() * (1000000 - 1 + 1)) + 1)\r\n            }\r\n            for (let i = arr.length - 1; i > 0; i--) {\r\n                let q = Math.floor(Math.random() * (i + 1));\r\n                [arr[i], arr[q]] = [arr[q], arr[i]];\r\n            }\r\n            for (let i = 0; i < this._players_select.value; i++) {\r\n                players_arr.push(0);\r\n                players_keys.push(Math.floor(Math.random() * (1000000 - 1 + 1)) + 1);\r\n                if (i === this.state.player_current) {\r\n                    active.push('header__mark--current');\r\n                } else {\r\n                    active.push('');\r\n                }\r\n            }\r\n            this.setState({\r\n                players_array: players_arr,\r\n                players_key: players_keys,\r\n                player_current: 0,\r\n                active_player: active,\r\n                cards: parseFloat(this._cards_select.value),\r\n                image: {\r\n                    img_arr: arr,\r\n                    img_key: imageKey,\r\n                }\r\n            });\r\n\r\n\r\n        } else {\r\n            players_arr = [];\r\n            active = [];\r\n            this.setState({\r\n                image: {\r\n                    img_arr: [],\r\n                    img_key: []\r\n                },\r\n                players_array: players_arr,\r\n                player_current: 0,\r\n                active_player: active,\r\n                turned_cards: [],\r\n            })\r\n        }\r\n        if (e.target.textContent === 'Старт') {\r\n            this._container.classList.add('container--active');\r\n            this._header.classList.remove('header--translate');\r\n            this._main.style.display = 'block'\r\n            if (parseFloat(this._cards_select.value) === 30) {\r\n                this.setState({ main_class: 'main__table main__table--30' })\r\n            } else if (parseFloat(this._cards_select.value) === 90) {\r\n                this.setState({ main_class: 'main__table main__table--90' })\r\n            } else {\r\n                this.setState({ main_class: 'main__table' })\r\n            }\r\n            e.target.textContent = 'Стоп';\r\n        } else {\r\n            this._container.classList.remove('container--active');\r\n            this._header.classList.add('header--translate');\r\n            this._main.style.display = 'none'\r\n            e.target.textContent = 'Старт'\r\n        }\r\n    }\r\n\r\n\r\n    // функция срабатывающая при клике на карту. Переворачивает карточку, заполняет стэйт turned_cards. Данная функция передается в компонент Card\r\n    readCard(element) {\r\n        let turn = this.state.turned_cards;\r\n        let boolean = true;\r\n        if ((this.state.turned_cards[0] === undefined || this.state.turned_cards[1] === undefined) && this.state.function_state === true) {\r\n            element.classList.add('main__card--open');\r\n            if (this.state.turned_cards[0] === undefined) {\r\n                turn.push(element);\r\n            } else if (element.firstChild != null) {\r\n                turn.push(element);\r\n                boolean = false;\r\n            }\r\n            this.setState({\r\n                turned_cards: turn,\r\n                function_state: boolean,\r\n            });\r\n\r\n        }\r\n        if (this.state.turned_cards[0] && this.state.turned_cards[1] && this.state.function_state === true) {\r\n            setTimeout(() => this.score(), 700);\r\n        }\r\n    }\r\n\r\n    // Функция, срабатывающая при заполнении стэйта turned_cards. Увеличивает счет активного игрока, при правильной комбинации или переключает активного игрока, при неправильной комбинации\r\n    score() {\r\n        let current = this.state.player_current;\r\n        let active = [];\r\n        let open_cards = this.state.open_cards;\r\n        if (this.state.turned_cards[0].firstChild.getAttribute('src') === this.state.turned_cards[1].firstChild.getAttribute('src')) {\r\n            this.state.players_array[current]++;\r\n            this.state.turned_cards[0].classList.add('main__card--equal');\r\n            this.state.turned_cards[1].classList.add('main__card--equal');\r\n            open_cards = open_cards + 2\r\n            this.setState({\r\n                turned_cards: [],\r\n                open_cards: open_cards,\r\n            });\r\n            setTimeout(() => this.setState({\r\n                function_state: true,\r\n            }), 720);\r\n        } else {\r\n            if (current < this.state.players_array.length - 1) {\r\n                current = current + 1;\r\n                this.state.turned_cards[0].classList.remove('main__card--open');\r\n                this.state.turned_cards[1].classList.remove('main__card--open');\r\n                this.setState({\r\n                    player_current: current,\r\n                    turned_cards: [],\r\n                });\r\n                setTimeout(() => this.setState({\r\n                    function_state: true,\r\n                }), 720);\r\n            } else {\r\n                current = 0;\r\n                this.state.turned_cards[0].classList.remove('main__card--open');\r\n                this.state.turned_cards[1].classList.remove('main__card--open');\r\n                this.setState({\r\n                    player_current: current,\r\n                    turned_cards: [],\r\n                });\r\n                setTimeout(() => this.setState({\r\n                    function_state: true,\r\n                }), 720);\r\n            }\r\n            for (let i = 0; i < this._players_select.value; i++) {\r\n                if (i === current) {\r\n                    active.push('header__mark--current');\r\n                } else {\r\n                    active.push('');\r\n                }\r\n            }\r\n            this.setState({\r\n                active_player: active,\r\n            });\r\n            setTimeout(() => this.setState({\r\n                function_state: true,\r\n            }), 720);\r\n        }\r\n\r\n        if (this.state.cards === this.state.open_cards) {\r\n            this._container.classList.remove('container--active');\r\n            this._header.classList.add('header--translate');\r\n            this._main.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\" ref={(a) => this._container = a\r\n            } >\r\n                <header className=\"header header--translate\" ref={(a) => this._header = a}>\r\n                    <div className=\"header__top\">\r\n                        <h1 className=\"header__title\">Найди пару.</h1>\r\n                        <span className=\"header__description\">\r\n                            Правила игры простые: открывайте картинки, запоминайте их расположение и найдите им пару.\r\n                            Игроку, нашедшему пару будет начислен балл. Данная игра рассчитана до 4 игроков.\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"header___bottom\">\r\n                        <div className='header__selects'>\r\n                            <div className=\"header__select\">\r\n                                <label htmlFor=\"header__players\">Количество игроков:</label>\r\n                                <select className=\"header__players\" name=\"players\" id=\"header__players\" ref={(a) => this._players_select = a}>\r\n                                    <option className=\"header__player\" value=\"1\">1</option>\r\n                                    <option className=\"header__player\" value=\"2\">2</option>\r\n                                    <option className=\"header__player\" value=\"3\">3</option>\r\n                                    <option className=\"header__player\" value=\"4\">4</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"header__select\">\r\n                                <label htmlFor=\"header__carts\">Количество карточек:</label>\r\n                                <select className=\"header__carts\" name=\"carts\" id=\"header__carts\" ref={(a) => this._cards_select = a}>\r\n                                    <option className=\"header__cart\" value=\"30\">30 карточек</option>\r\n                                    <option className=\"header__cart\" value=\"60\">60 карточек</option>\r\n                                    <option className=\"header__cart\" value=\"90\">90 карточек</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"header__score\">\r\n                            <PlayerScore players_array={this.state.players_array} keys={this.state.players_key} active_player={this.state.active_player} />\r\n                        </div>\r\n                        <div className=\"header__button\">\r\n                            <div>\r\n                                <button className=\"header__but header__start\" onClick={this.createData}>Старт</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n                <main className=\"main\" ref={(a) => this._main = a}>\r\n                    <div className=\"wrap\">\r\n                        <div className={this.state.main_class}>\r\n                            <Cards img={this.state.image} read={this.readCard} />\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n                <footer className='footer'></footer>\r\n            </div >\r\n        )\r\n    }\r\n\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/style.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('container')\r\n);\r\n\r\n"],"sourceRoot":""}